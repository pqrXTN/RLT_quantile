// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// EofVar
List EofVar(arma::umat& ObsTrack, arma::mat& Pred, arma::uvec& C, int usecores, int verbose);
RcppExport SEXP _RLT_EofVar(SEXP ObsTrackSEXP, SEXP PredSEXP, SEXP CSEXP, SEXP usecoresSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::umat& >::type ObsTrack(ObsTrackSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Pred(PredSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type C(CSEXP);
    Rcpp::traits::input_parameter< int >::type usecores(usecoresSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(EofVar(ObsTrack, Pred, C, usecores, verbose));
    return rcpp_result_gen;
END_RCPP
}
// ForestKernelUni_Self
List ForestKernelUni_Self(arma::field<arma::uvec>& NodeType, arma::field<arma::uvec>& SplitVar, arma::field<arma::vec>& SplitValue, arma::field<arma::uvec>& LeftNode, arma::field<arma::uvec>& RightNode, arma::field<arma::vec>& NodeSize, arma::mat& X, arma::uvec& Ncat, int usecores, int verbose);
RcppExport SEXP _RLT_ForestKernelUni_Self(SEXP NodeTypeSEXP, SEXP SplitVarSEXP, SEXP SplitValueSEXP, SEXP LeftNodeSEXP, SEXP RightNodeSEXP, SEXP NodeSizeSEXP, SEXP XSEXP, SEXP NcatSEXP, SEXP usecoresSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::field<arma::uvec>& >::type NodeType(NodeTypeSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::uvec>& >::type SplitVar(SplitVarSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::vec>& >::type SplitValue(SplitValueSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::uvec>& >::type LeftNode(LeftNodeSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::uvec>& >::type RightNode(RightNodeSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::vec>& >::type NodeSize(NodeSizeSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type Ncat(NcatSEXP);
    Rcpp::traits::input_parameter< int >::type usecores(usecoresSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(ForestKernelUni_Self(NodeType, SplitVar, SplitValue, LeftNode, RightNode, NodeSize, X, Ncat, usecores, verbose));
    return rcpp_result_gen;
END_RCPP
}
// ForestKernelUni_Cross
List ForestKernelUni_Cross(arma::field<arma::uvec>& NodeType, arma::field<arma::uvec>& SplitVar, arma::field<arma::vec>& SplitValue, arma::field<arma::uvec>& LeftNode, arma::field<arma::uvec>& RightNode, arma::field<arma::vec>& NodeSize, arma::mat& XTest, arma::mat& XTrain, arma::uvec& Ncat, arma::umat& ObsTrack, int usecores, int verbose);
RcppExport SEXP _RLT_ForestKernelUni_Cross(SEXP NodeTypeSEXP, SEXP SplitVarSEXP, SEXP SplitValueSEXP, SEXP LeftNodeSEXP, SEXP RightNodeSEXP, SEXP NodeSizeSEXP, SEXP XTestSEXP, SEXP XTrainSEXP, SEXP NcatSEXP, SEXP ObsTrackSEXP, SEXP usecoresSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::field<arma::uvec>& >::type NodeType(NodeTypeSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::uvec>& >::type SplitVar(SplitVarSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::vec>& >::type SplitValue(SplitValueSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::uvec>& >::type LeftNode(LeftNodeSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::uvec>& >::type RightNode(RightNodeSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::vec>& >::type NodeSize(NodeSizeSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type XTest(XTestSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type XTrain(XTrainSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type Ncat(NcatSEXP);
    Rcpp::traits::input_parameter< arma::umat& >::type ObsTrack(ObsTrackSEXP);
    Rcpp::traits::input_parameter< int >::type usecores(usecoresSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(ForestKernelUni_Cross(NodeType, SplitVar, SplitValue, LeftNode, RightNode, NodeSize, XTest, XTrain, Ncat, ObsTrack, usecores, verbose));
    return rcpp_result_gen;
END_RCPP
}
// RegForestUniFit
List RegForestUniFit(arma::mat& X, arma::vec& Y, arma::uvec& Ncat, List& param, List& RLTparam, arma::vec& obsweight, arma::vec& varweight, int usecores, int verbose, arma::umat& ObsTrack);
RcppExport SEXP _RLT_RegForestUniFit(SEXP XSEXP, SEXP YSEXP, SEXP NcatSEXP, SEXP paramSEXP, SEXP RLTparamSEXP, SEXP obsweightSEXP, SEXP varweightSEXP, SEXP usecoresSEXP, SEXP verboseSEXP, SEXP ObsTrackSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type Ncat(NcatSEXP);
    Rcpp::traits::input_parameter< List& >::type param(paramSEXP);
    Rcpp::traits::input_parameter< List& >::type RLTparam(RLTparamSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type obsweight(obsweightSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type varweight(varweightSEXP);
    Rcpp::traits::input_parameter< int >::type usecores(usecoresSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< arma::umat& >::type ObsTrack(ObsTrackSEXP);
    rcpp_result_gen = Rcpp::wrap(RegForestUniFit(X, Y, Ncat, param, RLTparam, obsweight, varweight, usecores, verbose, ObsTrack));
    return rcpp_result_gen;
END_RCPP
}
// RegForestUniPred
List RegForestUniPred(arma::field<arma::uvec>& NodeType, arma::field<arma::uvec>& SplitVar, arma::field<arma::vec>& SplitValue, arma::field<arma::uvec>& LeftNode, arma::field<arma::uvec>& RightNode, arma::field<arma::vec>& NodeSize, arma::field<arma::vec>& NodeAve, arma::mat& X, arma::uvec& Ncat, bool keep_all, int usecores, int verbose);
RcppExport SEXP _RLT_RegForestUniPred(SEXP NodeTypeSEXP, SEXP SplitVarSEXP, SEXP SplitValueSEXP, SEXP LeftNodeSEXP, SEXP RightNodeSEXP, SEXP NodeSizeSEXP, SEXP NodeAveSEXP, SEXP XSEXP, SEXP NcatSEXP, SEXP keep_allSEXP, SEXP usecoresSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::field<arma::uvec>& >::type NodeType(NodeTypeSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::uvec>& >::type SplitVar(SplitVarSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::vec>& >::type SplitValue(SplitValueSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::uvec>& >::type LeftNode(LeftNodeSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::uvec>& >::type RightNode(RightNodeSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::vec>& >::type NodeSize(NodeSizeSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::vec>& >::type NodeAve(NodeAveSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type Ncat(NcatSEXP);
    Rcpp::traits::input_parameter< bool >::type keep_all(keep_allSEXP);
    Rcpp::traits::input_parameter< int >::type usecores(usecoresSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(RegForestUniPred(NodeType, SplitVar, SplitValue, LeftNode, RightNode, NodeSize, NodeAve, X, Ncat, keep_all, usecores, verbose));
    return rcpp_result_gen;
END_RCPP
}
// SurvForestUniFit
List SurvForestUniFit(arma::mat& X, arma::uvec& Y, arma::uvec& Censor, arma::uvec& Ncat, List& param, List& RLTparam, arma::vec& obsweight, arma::vec& varweight, int usecores, int verbose, arma::umat& ObsTrack);
RcppExport SEXP _RLT_SurvForestUniFit(SEXP XSEXP, SEXP YSEXP, SEXP CensorSEXP, SEXP NcatSEXP, SEXP paramSEXP, SEXP RLTparamSEXP, SEXP obsweightSEXP, SEXP varweightSEXP, SEXP usecoresSEXP, SEXP verboseSEXP, SEXP ObsTrackSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type Censor(CensorSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type Ncat(NcatSEXP);
    Rcpp::traits::input_parameter< List& >::type param(paramSEXP);
    Rcpp::traits::input_parameter< List& >::type RLTparam(RLTparamSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type obsweight(obsweightSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type varweight(varweightSEXP);
    Rcpp::traits::input_parameter< int >::type usecores(usecoresSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< arma::umat& >::type ObsTrack(ObsTrackSEXP);
    rcpp_result_gen = Rcpp::wrap(SurvForestUniFit(X, Y, Censor, Ncat, param, RLTparam, obsweight, varweight, usecores, verbose, ObsTrack));
    return rcpp_result_gen;
END_RCPP
}
// SurvForestUniPred
List SurvForestUniPred(arma::field<arma::uvec>& NodeType, arma::field<arma::uvec>& SplitVar, arma::field<arma::vec>& SplitValue, arma::field<arma::uvec>& LeftNode, arma::field<arma::uvec>& RightNode, arma::field<arma::vec>& NodeSize, arma::field<arma::field<arma::vec>>& NodeHaz, arma::mat& X, arma::uvec& Ncat, size_t NFail, bool keep_all, int usecores, int verbose);
RcppExport SEXP _RLT_SurvForestUniPred(SEXP NodeTypeSEXP, SEXP SplitVarSEXP, SEXP SplitValueSEXP, SEXP LeftNodeSEXP, SEXP RightNodeSEXP, SEXP NodeSizeSEXP, SEXP NodeHazSEXP, SEXP XSEXP, SEXP NcatSEXP, SEXP NFailSEXP, SEXP keep_allSEXP, SEXP usecoresSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::field<arma::uvec>& >::type NodeType(NodeTypeSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::uvec>& >::type SplitVar(SplitVarSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::vec>& >::type SplitValue(SplitValueSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::uvec>& >::type LeftNode(LeftNodeSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::uvec>& >::type RightNode(RightNodeSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::vec>& >::type NodeSize(NodeSizeSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::field<arma::vec>>& >::type NodeHaz(NodeHazSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type Ncat(NcatSEXP);
    Rcpp::traits::input_parameter< size_t >::type NFail(NFailSEXP);
    Rcpp::traits::input_parameter< bool >::type keep_all(keep_allSEXP);
    Rcpp::traits::input_parameter< int >::type usecores(usecoresSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(SurvForestUniPred(NodeType, SplitVar, SplitValue, LeftNode, RightNode, NodeSize, NodeHaz, X, Ncat, NFail, keep_all, usecores, verbose));
    return rcpp_result_gen;
END_RCPP
}
// PLS_test
double PLS_test(const arma::uvec& Left_Fail, const arma::uvec& Left_Risk, const arma::uvec& All_Fail, const arma::uvec& All_Censor, const arma::uvec& All_Risk);
RcppExport SEXP _RLT_PLS_test(SEXP Left_FailSEXP, SEXP Left_RiskSEXP, SEXP All_FailSEXP, SEXP All_CensorSEXP, SEXP All_RiskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uvec& >::type Left_Fail(Left_FailSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Left_Risk(Left_RiskSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type All_Fail(All_FailSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type All_Censor(All_CensorSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type All_Risk(All_RiskSEXP);
    rcpp_result_gen = Rcpp::wrap(PLS_test(Left_Fail, Left_Risk, All_Fail, All_Censor, All_Risk));
    return rcpp_result_gen;
END_RCPP
}
// PLS_test2
double PLS_test2(const arma::uvec& Pseudo_X, const arma::uvec& Y_collapse, const arma::uvec& Censor_collapse, const arma::uvec& All_Fail, const arma::uvec& All_Censor, const arma::uvec& All_Risk, const arma::uvec& Left_Risk);
RcppExport SEXP _RLT_PLS_test2(SEXP Pseudo_XSEXP, SEXP Y_collapseSEXP, SEXP Censor_collapseSEXP, SEXP All_FailSEXP, SEXP All_CensorSEXP, SEXP All_RiskSEXP, SEXP Left_RiskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uvec& >::type Pseudo_X(Pseudo_XSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Y_collapse(Y_collapseSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Censor_collapse(Censor_collapseSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type All_Fail(All_FailSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type All_Censor(All_CensorSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type All_Risk(All_RiskSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Left_Risk(Left_RiskSEXP);
    rcpp_result_gen = Rcpp::wrap(PLS_test2(Pseudo_X, Y_collapse, Censor_collapse, All_Fail, All_Censor, All_Risk, Left_Risk));
    return rcpp_result_gen;
END_RCPP
}
// zetaF
arma::vec zetaF(const arma::uvec& All_Fail, const arma::uvec& All_Censor, const arma::uvec& All_Risk);
RcppExport SEXP _RLT_zetaF(SEXP All_FailSEXP, SEXP All_CensorSEXP, SEXP All_RiskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uvec& >::type All_Fail(All_FailSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type All_Censor(All_CensorSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type All_Risk(All_RiskSEXP);
    rcpp_result_gen = Rcpp::wrap(zetaF(All_Fail, All_Censor, All_Risk));
    return rcpp_result_gen;
END_RCPP
}
// wetaF
arma::vec wetaF(const arma::uvec& All_Fail, const arma::uvec& All_Censor, const arma::uvec& All_Risk);
RcppExport SEXP _RLT_wetaF(SEXP All_FailSEXP, SEXP All_CensorSEXP, SEXP All_RiskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uvec& >::type All_Fail(All_FailSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type All_Censor(All_CensorSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type All_Risk(All_RiskSEXP);
    rcpp_result_gen = Rcpp::wrap(wetaF(All_Fail, All_Censor, All_Risk));
    return rcpp_result_gen;
END_RCPP
}
// wetaC
arma::vec wetaC(const arma::uvec& All_Fail, const arma::uvec& All_Censor, const arma::uvec& All_Risk);
RcppExport SEXP _RLT_wetaC(SEXP All_FailSEXP, SEXP All_CensorSEXP, SEXP All_RiskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uvec& >::type All_Fail(All_FailSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type All_Censor(All_CensorSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type All_Risk(All_RiskSEXP);
    rcpp_result_gen = Rcpp::wrap(wetaC(All_Fail, All_Censor, All_Risk));
    return rcpp_result_gen;
END_RCPP
}
// zetaC
arma::vec zetaC(const arma::uvec& All_Fail, const arma::uvec& All_Censor, const arma::uvec& All_Risk);
RcppExport SEXP _RLT_zetaC(SEXP All_FailSEXP, SEXP All_CensorSEXP, SEXP All_RiskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uvec& >::type All_Fail(All_FailSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type All_Censor(All_CensorSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type All_Risk(All_RiskSEXP);
    rcpp_result_gen = Rcpp::wrap(zetaC(All_Fail, All_Censor, All_Risk));
    return rcpp_result_gen;
END_RCPP
}
// cindex_d
double cindex_d(arma::vec& Y, arma::uvec& Censor, arma::vec& pred);
RcppExport SEXP _RLT_cindex_d(SEXP YSEXP, SEXP CensorSEXP, SEXP predSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type Censor(CensorSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type pred(predSEXP);
    rcpp_result_gen = Rcpp::wrap(cindex_d(Y, Censor, pred));
    return rcpp_result_gen;
END_RCPP
}
// ARMA_EMPTY_UMAT
arma::umat ARMA_EMPTY_UMAT();
RcppExport SEXP _RLT_ARMA_EMPTY_UMAT() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(ARMA_EMPTY_UMAT());
    return rcpp_result_gen;
END_RCPP
}
// ARMA_EMPTY_VEC
arma::vec ARMA_EMPTY_VEC();
RcppExport SEXP _RLT_ARMA_EMPTY_VEC() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(ARMA_EMPTY_VEC());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RLT_EofVar", (DL_FUNC) &_RLT_EofVar, 5},
    {"_RLT_ForestKernelUni_Self", (DL_FUNC) &_RLT_ForestKernelUni_Self, 10},
    {"_RLT_ForestKernelUni_Cross", (DL_FUNC) &_RLT_ForestKernelUni_Cross, 12},
    {"_RLT_RegForestUniFit", (DL_FUNC) &_RLT_RegForestUniFit, 10},
    {"_RLT_RegForestUniPred", (DL_FUNC) &_RLT_RegForestUniPred, 12},
    {"_RLT_SurvForestUniFit", (DL_FUNC) &_RLT_SurvForestUniFit, 11},
    {"_RLT_SurvForestUniPred", (DL_FUNC) &_RLT_SurvForestUniPred, 13},
    {"_RLT_PLS_test", (DL_FUNC) &_RLT_PLS_test, 5},
    {"_RLT_PLS_test2", (DL_FUNC) &_RLT_PLS_test2, 7},
    {"_RLT_zetaF", (DL_FUNC) &_RLT_zetaF, 3},
    {"_RLT_wetaF", (DL_FUNC) &_RLT_wetaF, 3},
    {"_RLT_wetaC", (DL_FUNC) &_RLT_wetaC, 3},
    {"_RLT_zetaC", (DL_FUNC) &_RLT_zetaC, 3},
    {"_RLT_cindex_d", (DL_FUNC) &_RLT_cindex_d, 3},
    {"_RLT_ARMA_EMPTY_UMAT", (DL_FUNC) &_RLT_ARMA_EMPTY_UMAT, 0},
    {"_RLT_ARMA_EMPTY_VEC", (DL_FUNC) &_RLT_ARMA_EMPTY_VEC, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_RLT(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
